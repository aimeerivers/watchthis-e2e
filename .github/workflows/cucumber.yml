name: Cucumber

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
  workflow_dispatch:
  workflow_call:

jobs:
  cucumber:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      packages: read

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: node
          cache: npm

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker images
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: docker-images-${{ github.run_id }}
          restore-keys: |
            docker-images-

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull and cache all Docker images
        run: |
          echo "üì• Discovering and pulling all Docker images..."

          # Extract all images from docker-compose.yml (both GHCR and public registry)
          IMAGES=$(grep -E "^\s*image:\s*" docker-compose.yml | sed 's/.*image:\s*//' | sed 's/\s*$//' | sort | uniq)

          if [ -z "$IMAGES" ]; then
            echo "‚ö†Ô∏è No images found in docker-compose.yml"
            exit 0
          fi

          echo "üîç Found images:"
          echo "$IMAGES"
          echo ""

          # Create cache directory
          mkdir -p /tmp/.docker-cache

          # Process each image
          for IMAGE in $IMAGES; do
            # Create a safe filename from the image name
            CACHE_NAME=$(echo "$IMAGE" | sed 's|[/:@]|-|g' | sed 's|^-||')
            CACHE_FILE="/tmp/.docker-cache/${CACHE_NAME}.tar"
            
            echo "üîÑ Processing $IMAGE..."
            
            # Try to load from cache first
            if [ -f "$CACHE_FILE" ]; then
              echo "  üì¶ Loading from cache..."
              docker load < "$CACHE_FILE" || echo "  ‚ö†Ô∏è Cache load failed, will pull fresh"
            fi
            
            # Pull latest (only downloads if changed)
            echo "  üì• Pulling latest..."
            if docker pull "$IMAGE"; then
              echo "  ‚úÖ Pull successful"
            else
              echo "  ‚ùå Pull failed for $IMAGE"
              continue
            fi
            
            # Save to cache for next run
            echo "  üíæ Saving to cache..."
            docker save "$IMAGE" > "$CACHE_FILE"
            
            echo "  ‚úÖ $IMAGE cached successfully!"
            echo ""
          done

          echo "üéâ All Docker images processed!"

      - name: Install dependencies
        run: npm ci

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 | grep @playwright/test | sed 's/.*@//')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@v3
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-browsers-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright Chromium browser
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npm run playwright:install:chromium

      - name: Verify Playwright installation
        run: |
          if [ "${{ steps.playwright-cache.outputs.cache-hit }}" = "true" ]; then
            echo "üéâ Playwright browsers loaded from cache!"
          else
            echo "üì• Playwright browsers installed fresh"
          fi

      - name: Setup environment variables
        run: |
          echo "üìã Setting up test environment variables..."
          cp .env.github .env
          echo "‚úÖ Environment configured for GitHub Actions"

      - name: Start WatchThis services
        run: |
          echo "üöÄ Starting WatchThis services..."
          npm run docker:up
          npm run docker:status

      - name: Run Cucumber E2E tests
        run: npm run cucumber

      - name: Upload Cucumber report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reports
          path: reports/
          retention-days: 5

      - name: View service logs on failure
        if: failure()
        run: |
          echo "üîç Service logs for debugging:"
          npm run docker:logs

      - name: Stop services
        if: always()
        run: |
          echo "üõë Stopping services..."
          npm run docker:down
